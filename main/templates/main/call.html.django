{% extends "main/base.html.django" %}
{% block content %}
{% load static %}
	<div class="content-section fill-page transition">
	


        <div id="stream-wrapper">
            <div id="video-streams"></div>
    
            <div id="stream-controls">
                <button class="btn btn-outline-info redBtn ml-25" id="leave-btn">Leave call</button>
                <button class="btn btn-outline-info" type="button" id="mic-btn">Mic on</button>
                <button class="btn btn-outline-info" type="button" id="camera-btn">Camera on</button>
            </div>
        </div>
        



</div>
<script type="text/javascript" src="{% static 'main/js/AgoraRTC_N-4.15.0.js' %}"></script>
<script type="text/javascript">

const USER_ID = "{{user_id}}"
const friend_id = "{{friend_id}}"
    
const APP_ID = "{{ app_id }}"
const TOKEN = "{{ token }}"
const CHANNEL = "{{ channel_name }}"

let UID = "{{ uid }}"



console.log(APP_ID)
console.log(TOKEN)
console.log(CHANNEL)

const client = AgoraRTC.createClient({mode:'rtc', codec:'vp8'})

let localTracks = []
let remoteUsers = {}

let joinAndDisplayLocalStream = async () => {

    client.on('user-published', handleUserJoined)
    
    client.on('user-left', handleUserLeft)
    
    let UID = await client.join(APP_ID, CHANNEL, TOKEN, null)

    localTracks = await AgoraRTC.createMicrophoneAndCameraTracks()

    let player = `<div class="video-container" id="user-container-${UID}">
                        <div class="video-player" id="user-${UID}"></div>
                  </div>`
    document.getElementById('video-streams').insertAdjacentHTML('beforeend', player)

    localTracks[1].play(`user-${UID}`)
    
    await client.publish([localTracks[0], localTracks[1]])
}

let joinStream = async () => {
    await joinAndDisplayLocalStream()
    document.getElementById('stream-controls').style.display = 'flex'
}

let handleUserJoined = async (user, mediaType) => {
    remoteUsers[user.uid] = user 
    await client.subscribe(user, mediaType)

    if (mediaType === 'video'){
        let player = document.getElementById(`user-container-${user.uid}`)
        if (player != null){
            player.remove()
        }

        player = `<div class="video-container" id="user-container-${user.uid}">
                        <div class="video-player" id="user-${user.uid}"></div> 
                 </div>`
        document.getElementById('video-streams').insertAdjacentHTML('beforeend', player)

        user.videoTrack.play(`user-${user.uid}`)
    }

    if (mediaType === 'audio'){
        user.audioTrack.play()
    }
}

let handleUserLeft = async (user) => {
    delete remoteUsers[user.uid]
    document.getElementById(`user-container-${user.uid}`).remove()
}

let leaveAndRemoveLocalStream = async () => {
    for(let i = 0; localTracks.length > i; i++){
        localTracks[i].stop()
        localTracks[i].close()
    }

    await client.leave()

    document.getElementById('stream-controls').style.display = 'none'
    document.getElementById('video-streams').innerHTML = ''
    window.location.replace("/friend/"+friend_id)
}

let toggleMic = async (e) => {
    if (localTracks[0].muted){
        await localTracks[0].setMuted(false)
        e.target.innerText = 'Mic on'
        e.target.classList.remove('redBtn')
    }else{
        await localTracks[0].setMuted(true)
        e.target.innerText = 'Mic off'
        e.target.classList.add('redBtn')
    }
}

let toggleCamera = async (e) => {
    if(localTracks[1].muted){
        await localTracks[1].setMuted(false)
        e.target.innerText = 'Camera on'
        e.target.classList.remove('redBtn')
    }else{
        await localTracks[1].setMuted(true)
        e.target.innerText = 'Camera off'
        e.target.classList.add('redBtn')
    }
}

document.getElementById('leave-btn').addEventListener('click', leaveAndRemoveLocalStream)
document.getElementById('mic-btn').addEventListener('click', toggleMic)
document.getElementById('camera-btn').addEventListener('click', toggleCamera)

$(document).ready(function () {
    joinStream()
});



</script>


{% endblock content %}